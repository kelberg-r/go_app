version: 0.2
env:
  parameter-store:
    LOGIN: sonartoken
  variables:
    PACKAGE: "github.com/kelberg-r/go_app"
phases:
  install:
    runtime-versions:
      java: openjdk11
      golang: 1.13
    commands:
      - mkdir -p "/go/src/$(dirname ${PACKAGE})"
      - ln -s "${CODEBUILD_SRC_DIR}" "/go/src/${PACKAGE}"
      - apt-get update
      - apt-get install -y jq
      - cd /tmp
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip
      - echo "Download completed."
      - echo "Unziping downloaded file..."
      - unzip sonar-scanner-cli-4.4.0.2170-linux.zip
      - echo "Unzip completed."
      - rm sonar-scanner-cli-4.4.0.2170-linux.zip
      - export PATH=$PATH:/tmp/sonar-scanner-4.4.0.2170-linux/bin
  pre_build:
    commands:
      - cd "/go/src/${PACKAGE}"
#Unhash it to add unit testing
   #   - go get -t ./...
   # Vet examines Go source code and reports suspicious constructs
   #   - go vet ./...
   # Run unit tests 
   #   - go test ./...
  build:
    commands:
      - sonar-scanner -Dsonar.organization="kelberg-r" -Dsonar.projectKey="go_app" -Dsonar.login=$LOGIN -Dsonar.host.url="https://sonarcloud.io"
      - sleep 5
      - curl https://sonarcloud.io/api/qualitygates/project_status?projectKey=$Project >result.json
      - cat result.json
      - if [ $(jq -r '.projectStatus.status' result.json) = ERROR ] ; then $CODEBUILD_BUILD_SUCCEEDING -eq 0 ;fi
      
artifacts:
  files:
    - '**/*'
